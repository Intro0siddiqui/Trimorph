#!/bin/bash
set -euo pipefail

# --- Self-locating Script ---
SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )

# --- Conditional Sudo for Testing ---
SUDO_CMD="sudo"
if [[ "${TRIMORPH_TEST_MODE:-0}" == "1" ]]; then
  SUDO_CMD=""
fi

# Allow overriding paths for testing, with sensible defaults
TRIMORPH_ETC_DIR="${TRIMORPH_ETC_DIR:-/etc/trimorph}"
TRIMORPH_BASE_DIR="${TRIMORPH_BASE_DIR:-/usr/local/trimorph/base}"
TRIMORPH_LOG_DIR="${TRIMORPH_LOG_DIR:-/var/log/trimorph}"
TRIMORPH_CACHE_DIR="${TRIMORPH_CACHE_DIR:-/var/cache/trimorph/packages}"
TRIMORPH_TMP_DIR="${TRIMORPH_TMP_DIR:-/var/tmp}"


# --- Argument Parsing ---
parallel_mode=0
check_mode=0
dry_run_mode=0
while [[ $# -gt 0 ]]; do
    case "$1" in
        --parallel) parallel_mode=1; shift ;;
        --check) check_mode=1; shift ;;
        --dry-run) dry_run_mode=1; shift ;;
        *) break ;;
    esac
done

if [[ $# -lt 1 ]]; then
    echo "Usage: $0 [--parallel] [--check] [--dry-run] <jail> [cmd] [args...]" >&2
    exit 1
fi

jail="$1"; shift
conf="${TRIMORPH_ETC_DIR}/jails.d/$jail.conf"

# --- Validation and Config Sourcing ---
if [[ ! -r "$conf" ]]; then
    echo "[FAIL] Config file not found or not readable: $conf"
    exit 1
fi
source <($SCRIPT_DIR/trimorph-parse-conf "$conf")

# --- Functions ---
run_checks() {
    local all_ok=1
    echo "--- Running Environment Checks for Jail: $jail ---"

    local base_root="${TRIMORPH_BASE_DIR}/$jail"
    if [[ ! -d "$base_root" ]]; then
        echo "[FAIL] Base image is missing. Run 'sudo trimorph-bootstrap $jail'"
        all_ok=0
    else
        echo "[OK] Base image found at $base_root."
    fi

    if ! command -v "$TRIMORPH_pkgmgr" &> /dev/null; then
         echo "[WARN] Package manager '$TRIMORPH_pkgmgr' not found on host."
    fi

    if ! command -v systemd-nspawn &> /dev/null; then
        echo "[FAIL] Required binary 'systemd-nspawn' not found in PATH."
        all_ok=0
    else
        echo "[OK] Required binary 'systemd-nspawn' found."
    fi

    if [[ "$parallel_mode" -eq 0 ]]; then
        local conflict_found=0
        for scope in /run/systemd/transient/trimorph-*.scope; do
            [[ -e "$scope" ]] || continue
            local scope_name
            scope_name=$(basename "$scope" .scope)
            if [[ "$scope_name" != "trimorph-$jail" ]]; then
                echo "[WARN] Conflicting jail is active: $scope_name"
                conflict_found=1
            fi
        done
        if [[ "$conflict_found" -eq 0 ]]; then
            echo "[OK] No conflicting jails are active."
        fi
    else
        echo "[INFO] Parallel mode is enabled, skipping conflict check."
    fi

    if [[ "$all_ok" -eq 1 ]]; then
        echo "--- Checks Passed ---"
        return 0
    else
        echo "--- One or more checks failed. ---"
        return 1
    fi
}

# --- Main Logic ---

# If --check or --dry-run, run checks and exit if they fail.
if [[ "$check_mode" -eq 1 || "$dry_run_mode" -eq 1 ]]; then
    if ! run_checks; then
        exit 1
    fi
    # If only --check was passed, we are done.
    if [[ "$check_mode" -eq 1 ]]; then
        exit 0
    fi
fi

# --- Command Construction for Dry Run and Normal Execution ---
base_root="${TRIMORPH_BASE_DIR}/$jail"
overlay_upper="${TRIMORPH_TMP_DIR}/trimorph_${jail}_upper_$$"
overlay_work="${TRIMORPH_TMP_DIR}/trimorph_${jail}_work_$$"

# Use systemd-nspawn's native overlay support.
nspawn_opts=(
    --quiet
    --directory="$TRIMORPH_root"
    --overlay="${base_root}:${overlay_upper}:${overlay_work}"
)

# Add bind mounts
bind_mounts=("--bind-ro=/tmp/.X11-unix" "--bind-ro=/dev/dri" "--bind-ro=/etc/resolv.conf")
case "$TRIMORPH_pkgmgr" in
    *apt) bind_mounts+=("--bind=${TRIMORPH_CACHE_DIR}:/var/cache/apt/archives") ;;
    *pacman) bind_mounts+=("--bind=${TRIMORPH_CACHE_DIR}:/var/cache/pacman/pkg") ;;
esac
if [[ -n "${TRIMORPH_mounts:-}" ]]; then
    IFS=',' read -ra mnt <<< "${TRIMORPH_mounts}"
    for d in "${mnt[@]}"; do bind_mounts+=("--bind-ro=$(echo "$d" | xargs)"); done
fi
nspawn_opts+=("${bind_mounts[@]}")

# Add environment variables
if [[ -n "${TRIMORPH_env:-}" ]]; then
    IFS=',' read -ra env_list <<< "${TRIMORPH_env}"
    for e in "${env_list[@]}"; do nspawn_opts+=("--setenv=$(echo "$e" | xargs)"); done
fi

# Assemble the full systemd-run command
full_cmd=(
    systemd-run --scope --slice=trimorph.slice --uid="$(id -u)" --gid="$(id -g)" --pipe --wait --description="trimorph-$jail"
    systemd-nspawn "${nspawn_opts[@]}" "$TRIMORPH_pkgmgr" $TRIMORPH_pkgmgr_args "$@"
)

# If this is a dry run, print the command and exit.
if [[ "$dry_run_mode" -eq 1 ]]; then
    echo "--- Dry Run: Command to be Executed ---"
    printf "%q " "${full_cmd[@]}"
    echo
    exit 0
fi

# --- Normal Execution ---

# Setup directories needed for overlay and cache.
$SUDO_CMD mkdir -p "$overlay_upper" "$overlay_work" "$TRIMORPH_CACHE_DIR"
$SUDO_CMD chown -R "$(id -u):$(id -g)" "$overlay_upper" "$overlay_work"
$SUDO_CMD chmod 777 "$TRIMORPH_CACHE_DIR"
trap '$SUDO_CMD rm -rf "$overlay_upper" "$overlay_work"' EXIT

if [[ "$parallel_mode" -eq 0 ]]; then
    for scope in /run/systemd/transient/trimorph-*.scope; do
        [[ -e "$scope" ]] || continue
        scope_name=$(basename "$scope" .scope)
        [[ "$scope_name" == "trimorph-$jail" ]] && continue
        echo "Stopping $scope_name..." >&2
        systemctl stop "$scope_name" 2>/dev/null || true
    done
fi

# Execute with optional logging
if [[ -n "${TRIMORPH_DEBUG:-}" ]]; then
    log_file="${TRIMORPH_LOG_DIR}/${jail}.log"
    $SUDO_CMD touch "$log_file"
    $SUDO_CMD chown "$(id -u):$(id -g)" "$log_file"
    echo "--- $(date '+%Y-%m-%d %H:%M:%S') --- Executing command ---" >> "$log_file"
    "${full_cmd[@]}" 2>&1 | tee -a "$log_file"
else
    "${full_cmd[@]}"
fi