#!/bin/bash
set -euo pipefail

# Check for required dependencies
check_dependencies() {
    local missing_deps=()

    # Check for required commands
    for cmd in sudo; do
        if ! command -v "$cmd" &> /dev/null; then
            missing_deps+=("$cmd")
        fi
    done

    # Check for required trimorph scripts
    local script_dir=$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &> /dev/null && pwd)
    for script in trimorph-db; do
        if [[ ! -x "$script_dir/../bin/$script" ]]; then
            # Check alternative location
            if [[ ! -x "/usr/local/bin/$script" ]]; then
                missing_deps+=("/usr/local/bin/$script")
            fi
        fi
    done

    if [[ ${#missing_deps[@]} -gt 0 ]]; then
        echo "Error: Missing required dependencies:"
        for dep in "${missing_deps[@]}"; do
            echo "  - $dep"
        done
        exit 1
    fi
}

check_dependencies

# Check required arguments
if [[ $# -lt 1 ]]; then
    echo "Usage: $0 <install_log_file>"
    exit 1
fi

install_log="$1"

# Check if install log exists
if [[ ! -f "$install_log" ]]; then
    echo "Error: Install log file not found: $install_log"
    exit 1
fi

# Verify this is a Trimorph local install log
if ! grep -q "# Local package installation log for:" "$install_log"; then
    echo "Error: Not a valid Trimorph local installation log file: $install_log"
    exit 1
fi

# Extract the list of files from the install log
# The file list starts after the informational lines
file_list_start=$(grep -n "^/" "$install_log" | head -n 1 | cut -d: -f1)
if [[ -z "$file_list_start" ]]; then
    echo "Error: No installed files found in log: $install_log"
    exit 1
fi

# Get the list of installed files
installed_files=()
while IFS= read -r file_path; do
    if [[ -n "$file_path" ]]; then
        installed_files+=("$file_path")
    fi
done < <(tail -n +$file_list_start "$install_log")

if [[ ${#installed_files[@]} -eq 0 ]]; then
    echo "No files to uninstall."
    exit 0
fi

echo "Files to be removed:"
for file in "${installed_files[@]}"; do
    echo "  $file"
done

# Get package name from log
pkg_name=$(grep '# Package name:' "$install_log" | cut -d: -f2 | xargs)
pkg_format=$(grep '# Package format:' "$install_log" | cut -d: -f2 | xargs)
original_file=$(grep '# Original file:' "$install_log" | cut -d: -f2 | xargs)

echo
echo "Package name: $pkg_name"
echo "Package format: $pkg_format"
echo "Original file: $original_file"

# Confirm uninstallation
echo
read -p "Do you want to remove these files from the host system? (y/N): " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo "Uninstallation cancelled."
    exit 0
fi

# Remove files
removed_count=0
failed_count=0
for file_path in "${installed_files[@]}"; do
    if [[ -e "$file_path" ]]; then
        if sudo rm -f "$file_path"; then
            echo "Removed: $file_path"
            ((removed_count++))
        else
            echo "Failed to remove: $file_path"
            ((failed_count++))
        fi
    elif [[ -L "$file_path" ]]; then
        # Handle symbolic links
        if sudo rm -f "$file_path"; then
            echo "Removed symlink: $file_path"
            ((removed_count++))
        else
            echo "Failed to remove symlink: $file_path"
            ((failed_count++))
        fi
    else
        # File doesn't exist, which is fine
        echo "File not found (already removed?): $file_path"
    fi
done

# Remove empty directories that might have been left behind
for file_path in "${installed_files[@]}"; do
    dir_path=$(dirname "$file_path")
    # Try to remove the directory if it's now empty
    while [[ "$dir_path" != "/" && "$dir_path" != "/usr" && "$dir_path" != "/usr/local" ]]; do
        if [[ -d "$dir_path" ]]; then
            if sudo rmdir "$dir_path" 2>/dev/null; then
                echo "Removed empty directory: $dir_path"
            else
                # Directory not empty or couldn't be removed, stop here
                break
            fi
        fi
        dir_path=$(dirname "$dir_path")
    done
done

# Update the database to remove the package entry
if [[ -n "$pkg_name" && -x "/usr/local/bin/trimorph-db" ]]; then
    /usr/local/bin/trimorph-db remove-package "$pkg_name" 2>/dev/null || true
fi

# Mark the install log as removed
sudo mv "$install_log" "${install_log}.removed"
echo

echo "Uninstallation completed."
echo "Files removed: $removed_count"
if [[ $failed_count -gt 0 ]]; then
    echo "Files that failed to remove: $failed_count"
fi
echo "Installation log moved to: ${install_log}.removed"