#!/bin/bash
set -euo pipefail

# --- Self-locating Script ---
SCRIPT_DIR=$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &> /dev/null && pwd)

# Allow overriding paths for testing, with sensible defaults
TRIMORPH_ETC_DIR="${TRIMORPH_ETC_DIR:-/etc/trimorph}"
TRIMORPH_BASE_DIR="${TRIMORPH_BASE_DIR:-/usr/local/trimorph/base}"
TRIMORPH_CACHE_DIR="${TRIMORPH_CACHE_DIR:-/var/cache/trimorph/packages}"

# Check required arguments
if [[ $# -lt 2 ]]; then
    echo "Usage: $0 <jail> <package> [package...]"
    exit 1
fi

jail="$1"; shift

# Ensure configuration directory exists
config_dir="${TRIMORPH_ETC_DIR}/jails.d"
if [[ ! -d "$config_dir" ]]; then
    echo "Error: Configuration directory does not exist: $config_dir"
    echo "Please create the directory and add jail configuration files"
    exit 1
fi

conf="${TRIMORPH_ETC_DIR}/jails.d/$jail.conf"
if [[ ! -r "$conf" ]]; then
    echo "[FAIL] Config file not found or not readable: $conf"
    exit 1
fi

# Source configuration
source <($SCRIPT_DIR/../sbin/trimorph-parse-conf "$conf")

echo "=== DRY RUN: Installing packages to host from jail '$jail' ==="
echo "Packages to be installed: $*"
echo

# Create temporary overlay to simulate installation
work_dir=$(mktemp -d "/tmp/trimorph_dry_run_${jail}_XXXXXX")
trap 'rm -rf "$work_dir"' EXIT

base_root="${TRIMORPH_BASE_DIR}/$jail"
overlay_upper="${TRIMORPH_CACHE_DIR}/tmp_${jail}_dry_run_$$"
overlay_work="${TRIMORPH_CACHE_DIR}/tmp_${jail}_work_$$"

# Create the overlay directories
sudo mkdir -p "$overlay_upper" "$overlay_work"
sudo chown "$(id -u):$(id -g)" "$overlay_upper" "$overlay_work"

# Mock installation process to see what would be installed
echo "Simulating package installation in overlay..."

case "$TRIMORPH_pkgmgr" in
    *apt)
        echo "Would install packages with apt (including dependencies)..."
        echo "Command that would be executed:"
        echo "sudo systemd-nspawn --quiet --directory=\"$TRIMORPH_root\" --overlay=\"${base_root}:${overlay_upper}:${overlay_work}\" --bind-ro=/etc/resolv.conf --bind=/tmp/.X11-unix --bind=/dev/dri --setenv=DEBIAN_FRONTEND=noninteractive $TRIMORPH_pkgmgr $TRIMORPH_pkgmgr_args install -y $*"
        ;;
    *pacman)
        echo "Would install packages with pacman (including dependencies)..."
        echo "Command that would be executed:"
        echo "sudo systemd-nspawn --quiet --directory=\"$TRIMORPH_root\" --overlay=\"${base_root}:${overlay_upper}:${overlay_work}\" --bind-ro=/etc/resolv.conf --bind=/tmp/.X11-unix --bind=/dev/dri --setenv=LANG=C.UTF-8 $TRIMORPH_pkgmgr $TRIMORPH_pkgmgr_args -Sy $*"
        ;;
    *xbps)
        echo "Would install packages with xbps (including dependencies)..."
        echo "Command that would be executed:"
        echo "sudo systemd-nspawn --quiet --directory=\"$TRIMORPH_root\" --overlay=\"${base_root}:${overlay_upper}:${overlay_work}\" --bind-ro=/etc/resolv.conf --bind=/tmp/.X11-unix --bind=/dev/dri $TRIMORPH_pkgmgr $TRIMORPH_pkgmgr_args -Sy $*"
        ;;
    *apk)
        echo "Would install packages with apk (including dependencies)..."
        echo "Command that would be executed:"
        echo "sudo systemd-nspawn --quiet --directory=\"$TRIMORPH_root\" --overlay=\"${base_root}:${overlay_upper}:${overlay_work}\" --bind-ro=/etc/resolv.conf --bind=/tmp/.X11-unix --bind=/dev/dri $TRIMORPH_pkgmgr $TRIMORPH_pkgmgr_args add $*"
        ;;
    *)
        echo "Unsupported package manager: $TRIMORPH_pkgmgr"
        sudo rm -rf "$overlay_upper" "$overlay_work"
        exit 1
        ;;
esac

echo
echo "This is only a simulation. No packages have been installed."

# Clean up
sudo rm -rf "$overlay_upper" "$overlay_work"